// Generated by CoffeeScript 1.7.1

/*
  Module dependencies
 */
var ArangoDB, Connector, arango, async, debug, generateArangoURL, util;

arango = require('arangojs');

util = require('util');

async = require('async');

Connector = require('loopback-connector').Connector;

debug = require('debug')('loopback:connector:arango');


/*
  TODO: generate class for ArangoID
 */

generateArangoURL = function(options) {
  var database, hostname, port, username;
  debug('Creating URL from options');
  hostname = options.hostname || options.host || '127.0.0.1';
  port = options.port || 8529;
  database = options.database || options.db || 'test';
  username = options.username || options.user;
  password = options.password || options.pass || '';
  if (username && options.password) {
    return "http://" + username + ":" + password + "@" + options.hostname +
      ":" + options.port + "/" + options.database;
  } else {
    return "http://" + options.hostname + ":" + options.port + "/" + options
      .database;
  }
};

exports.initialize = function(dataSource, callback) {
  var s;
  if (arango == null) {
    return;
  }
  debug("Called initialize");
  s = dataSource.settings;
  s.url = s.url || generateArangoURL(s);
  dataSource.connector = new ArangoDB(s, dataSource);
  dataSource.connector.connect();

  /*
    Connector instance can have an optional property named as DataAccessObject that provides
    static and prototype methods to be mixed into the model constructor. The property can be defined
    on the prototype.
   */

  /*
    Connector instance can have an optional function to be called to handle data model definitions.
    The function can be defined on the prototype too.
    @param model The name of the model
    @param properties An object for property definitions keyed by propery names
    @param settings An object for the model settings
   */
};


/*
 */

ArangoDB = (function() {
  function ArangoDB(settings, dataSource) {
    debug("------------------------------");
    debug("Creating new ArangoDB instance");
    Connector.call(this, 'arango', settings);
    this.debug = settings.debug || debug.enabled;
    this.dataSource = dataSource;
    debug("Settings: " + (JSON.stringify(settings)));
  }


  /*
    Evaluates a where object containing condition properties, operators and values
   */

  ArangoDB.evaluateWhere = function(where, resultVariable, model) {
    var self = this;
    var assignNewQueryVariable, condArray, condOp, condProp, condValue,
      filterCond, geoObject, index, lower, op_map, upper, varHash;
    debug("------------------------------");
    debug("Evaluating where object");
    debug(where);
    resultVariable = resultVariable || 'result';
    condArray = [];
    varHash = {};
    geoObject = null;
    index = 0;
    for (condProp in where) {
      condValue = where[condProp];
      if (condProp === 'id') {
        condProp = '_id';
        if (condValue.indexOf('/' === -1)) {
          condValue = model + "/" + condValue;
        }
      }
      condOp = false;
      if (condValue && condValue.constructor.name === 'Object') {
        condOp = Object.keys(condValue)[0];
        condValue = condValue[condOp];
      }
      assignNewQueryVariable = function(value) {
        var partName;
        partName = 'param_' + (index++);
        varHash[partName] = value;
        return '@' + partName;
      };
      if (condOp === 'like' || condOp === 'nlike') {
        throw new Error("" + condOp + " is currently not supported");
      }
      op_map = {
        lte: '<=',
        lt: '<',
        gte: '>=',
        gt: '>',
        neq: '!='
      };
      switch (condOp) {
        case 'lte':
        case 'lt':
        case 'gte':
        case 'gt':
        case 'neq':
          condArray.push("(" + resultVariable + "." + condProp + " " +
            op_map[condOp] + " " + (assignNewQueryVariable(condValue)) +
            ")");
          break;
        case 'inq':
        case 'nin':
          filterCond = "(" + resultVariable + "." + condProp + " IN " +
            (assignNewQueryVariable(condValue)) + ")";
          if (condOp === 'nin') {
            filterCond = "!" + filterCond;
          }
          condArray.push(filterCond);
          break;
        case 'between':
          lower = condValue['lower'] || condValue[0];
          upper = condValue['upper'] || condValue[1];
          condArray.push("(" + resultVariable + "." + condProp + " >= " +
            (assignNewQueryVariable(lower)) + ")");
          condArray.push("(" + resultVariable + "." + condProp + " <= " +
            (assignNewQueryVariable(upper)) + ")");
          break;
        case 'near':
          geoObject = {
            lat: condValue.split(',')[0],
            long: condValue.split(',')[1]
          };
          break;
        default:
          condArray.push("(" + resultVariable + "." + condProp + " == " +
            (assignNewQueryVariable(condValue)) + ")");
      }
    }
    return {
      condArray: condArray,
      varHash: varHash,
      geoObject: geoObject
    };
  };


  /*
    connect to ArangoDB
   */

  ArangoDB.prototype.connect = function(callback) {
    debug("------------------------------");
    debug("Connecting to ArangoDB with " + this.settings.url);
    if (this.db) {
      return process.nextTick((function(_this) {
        return function() {
          return callback && callback(null, _this.db);
        };
      })(this));
    } else {
      this.db = new arango.Connection(this.settings.url);
      return callback && callback(null, this.db);
    }
  };


  /*
    Define a model
   */

  ArangoDB.prototype.define = function(definition) {
    debug("------------------------------");
    debug("define: called for model " + definition.model.modelName);
    if (definition.settings != null) {
      definition.settings = {};
    }
    if (!this._models[definition.model.modelName]) {
      return this._models[definition.model.modelName] = definition;
    }
  };


  /*
    Define a foreign key
   */

  ArangoDB.prototype.defineForeignKey = function(model, key, foreignModel,
    cb) {
    debug("------------------------------");
    debug("defineForeignKey: called for model " + model +
      " with foreign key " + key + " from model " + foreignModel);
    return cb(null, String);
  };


  /*
    Define a property
   */

  ArangoDB.prototype.defineProperty = function(model, propertyName,
    propertyDefinition) {
    debug("------------------------------");
    return debug("defineProperty: called with for model " + model +
      " and property " + propertyName + " and definition " + (JSON.stringify(
        propertyDefinition)));
  };


  /*
    Converting database values to models
   */

  ArangoDB.prototype.fromDB = function(model, data) {
    var key, properties, val;
    if (data == null) {
      return null;
    }
    properties = this._models[model].properties;
    for (key in data) {
      val = data[key];
      if (key === '_key' || key === '_id') {
        if (key === '_key') {
          data.id = data[key];
        }
        delete data[key];
        continue;
      }
      if (properties[key]) {
        if (properties[key].type.name === 'Date' && (val != null)) {
          val = new Date(val);
        }
      }
      data[key] = val;
    }
    return data;
  };


  /*
   */

  ArangoDB.prototype.toDB = function(model, data) {
    var key, properties, val, _ref, _ref1;
    if (data == null) {
      return null;
    }
    properties = this._models[model].properties;
    for (key in data) {
      val = data[key];
      if (key === 'id' || key === '_rev') {
        delete data[key];
        continue;
      }
      if (((_ref = properties[key]) != null ? (_ref1 = _ref.type) !=
          null ? _ref1.name : void 0 : void 0) != null) {
        val = (function() {
          switch (properties[key].type.name) {
            case 'Date':
              if (val instanceof Date) {
                return val.toString();
              } else {
                return val;
              }
              break;
            default:
              return val;
          }
        })();
      }
      data[key] = val;
    }
    return data;
  };


  /*
    Generates a arango compatible id
   */

  ArangoDB.prototype.generateId = function(model, key) {
    if (key.indexOf('/' === -1)) {
      return "" + model + "/" + key;
    } else {
      return key;
    }
  };


  /*
    executeQuery
   */

  ArangoDB.prototype.executeQuery = function(query, args, count, callback) {
    debug("------------------------------");
    debug("Executing query '" + query + "' with '" + (JSON.stringify(
      args)) + "'");
    if (typeof count === 'function') {
      callback = count;
      count = null;
    }
    debug("Query: " + query);
    debug("Args: " + (JSON.stringify(args)));
    this.db.query.string = query;
    if (count) {
      this.db.query.count(count);
    }
    this.db.query.exec(args, callback);
    return this.db.query.exec(args, function(err, res, hdr) {
      debug("Error: " + (JSON.stringify(err)));
      debug("Result: " + (JSON.stringify(res)));
      if (hdr != null) {
        debug("Header: " + (JSON.stringify(hdr)));
      }
      return callback(err, res.result, hdr);
    });
  };


  /*
    Create a new model instance
   */

  ArangoDB.prototype.create = function(model, data, callback) {
    debug("------------------------------");
    debug("" + model + ": CREATE new model instance with '" + (JSON.stringify(
      data)) + "'");
    return this.db.document.create(model, this.toDB(model, data), {},
      function(err, res, hdr) {
        if (err) {
          return callback(err, null);
        }
        return callback(null, res._key);
      });
  };


  /*
    Save a model instance
   */

  ArangoDB.prototype.save = function(model, data, callback) {
    debug("------------------------------");
    debug("" + model +
      ": Saving (= updating or creating) a model instance");
    return this.updateOrCreate(model, data, callback);
  };


  /*
    Update a model instance or create a new model instance if it doesn't exist
   */

  ArangoDB.prototype.updateOrCreate = function(model, data, callback) {
    debug("------------------------------");
    debug("" + model + ": UPDATE or CREATE a model instance with '" + (
      JSON.stringify(data)) + "'");
    if (data.id == null) {
      return this.create(model, data, callback);
    }
    return this.find(model, data.id, (function(_this) {
      return function(err, inst) {
        if (!err) {
          return _this.updateAttributes(model, data.id, data,
            callback);
        }
        delete data.id;
        return _this.create(model, data, function(err, id) {
          if (err) {
            return callback(err);
          }
          return callback(null, this.fromDB(model, data));
        });
      };
    })(this));
  };


  /*
    Update the attributes for a model instance by id
   */

  ArangoDB.prototype.updateAttributes = function(model, id, data, callback) {
    debug("------------------------------");
    debug("" + model + ": UPDATE ATTRIBUTES of instance with id '" + id +
      "' with '" + (JSON.stringify(this.toDB(model, data))) + "'");
    return this.db.document.patch(this.generateId(model, id), this.toDB(
      model, data), (function(_this) {
      return function(err, res) {
        if (err) {
          return callback(err, res);
        }
        return _this.db.document.get(_this.generateId(model, id),
          function(err, data) {
            if (err) {
              return callback(err, null);
            }
            return callback(null, _this.fromDB(model, data));
          });
      };
    })(this));
  };


  /*
    Check if a model instance exists by id
   */

  ArangoDB.prototype.exists = function(model, id, callback) {
    debug("" + model + ": Check if a instance with id '" + id +
      "' exists");
    return this.db.document.head(this.generateId(model, id), function(
      err, res, hdr) {
      var _ref, _ref1;
      debug("HEAD");
      if (err) {
        debug('ERROR');
        debug(hdr.status, typeof hdr.status);
        if ((_ref = hdr.status) === 404 || _ref === 412) {
          return callback(null, false);
        }
        return callback(err);
      } else {
        debug("SUCCESS");
        debug(hdr.status);
        if ((_ref1 = hdr.status) === 200 || _ref1 === 304) {
          return callback(null, true);
        }
        return callback(null, false);
      }
    });
  };


  /*
    Find a model instance by id
   */

  ArangoDB.prototype.find = function(model, id, callback) {
    var model_var;
    debug("------------------------------");
    debug("" + model + ": FIND instance with id '" + id + "'");
    model_var = model.toLowerCase().charAt(0);
    return this.db.document.get(this.generateId(model, id), (function(
      _this) {
      return function(err, data) {
        if (err && data.code === 404) {
          return callback(null);
        }
        if (err) {
          return callback(err, null);
        }
        return callback(null, _this.fromDB(model, data));
      };
    })(this));
  };


  /*
    Count the model instances by the where criteria
   */

  ArangoDB.prototype.count = function(model, callback, where) {
    var args, filterWhere, main_query, queryModel, resultVariable,
      sub_query, _ref;
    debug("" + model + ": COUNT all intances where '" + (JSON.stringify(
      where)) + "'");
    resultVariable = 'result';
    sub_query = this.db.query["new"]();
    args = {};
    if (where == null) {
      sub_query["for"](resultVariable)["in"](model)["return"]('1');
    } else {
      filterWhere = ArangoDB.evaluateWhere(where, resultVariable);
      sub_query = sub_query["for"](resultVariable);
      queryModel = (_ref = filterWhere.geoObject === null) != null ?
        _ref : {
          model: "NEAR(" + model + ", " + filterWhere.geoObject.lat +
            ", " + filterWhere.geoObject.long + ", null, 'distance')"
        };
      sub_query = sub_query["in"](queryModel);
      sub_query = sub_query.filter(filterWhere.condArray.join(' && '));
      args = filterWhere.varHash;
      sub_query = sub_query["return"]('1');
    }
    main_query = this.db.query["new"]();
    main_query = main_query["let"]('counter = (' + sub_query.toString() +
      ')')["return"]('LENGTH(counter)');
    return this.executeQuery(main_query.toString(), args, function(err,
      res, hdr) {
      if (err) {
        return callback(err, res);
      }
      return callback(null, res.result[0]);
    });
  };


  /*
    Query model instances by the filter
   */

  ArangoDB.prototype.all = function(model, filter, callback) {
    var args, excludeFields, field, filterLimit, filterWhere, geoObject,
      include, includeFields, limit, order, orders, query,
      resultVariable, returnString, _ref, _ref1;
    debug("------------------------------");
    debug("" + model + ": FINDING ALL instances with " + (JSON.stringify(
      filter)));
    query = this.db.query["new"]();
    args = {};
    resultVariable = 'result';
    query = query["for"](resultVariable);
    filterWhere = false;
    if ((filter != null ? filter.where : void 0) != null) {
      filterWhere = ArangoDB.evaluateWhere(filter.where, resultVariable,
        model);
      geoObject = filterWhere.geoObject;
      limit = (_ref = filter.limit) != null ? _ref : 'null';
      model = geoObject === null ? model : "NEAR(" + model + ", " +
        filterWhere.geoObject.lat + ", " + filterWhere.geoObject.long +
        ", " + limit + ", 'distance')";
      query = query["in"](model);
      query = query.filter(filterWhere.condArray.join(' && '));
      args = filterWhere.varHash;
    } else {
      query = query["in"](model);
    }
    if ((filter != null ? filter.order : void 0) != null) {
      if (!Array.isArray(filter.order)) {
        order = resultVariable + '.' + filter.order;
      } else {
        orders = filter.order.map(function(prop) {
          return "" + resultVariable + "." + prop;
        });
        order = orders.join(', ');
      }
      query = query.sort(order);
    }
    if ((filter != null ? filter.limit : void 0) != null) {
      filterLimit = filter.skip ? "" + filter.skip + "," + filter.limit :
        filter.limit;
      query = query.limit(filterLimit);
    }
    returnString = resultVariable;
    if ((filter != null ? filter.fields : void 0) != null) {
      includeFields = [];
      excludeFields = [];
      _ref1 = filter.fields;
      for (field in _ref1) {
        include = _ref1[field];
        if (include) {
          includeFields.push(field);
        } else {
          excludeFields.push(field);
        }
      }
      returnString = includeFields.length > 0 ? "KEEP(" + returnString +
        ", " + includeFields + ")" : returnString;
      returnString = excludeFields.length > 0 ? "UNSET(" + returnString +
        ", " + excludeFields + ")" : returnString;
    }
    query["return"](returnString);
    return this.executeQuery(query.toString(), args, (function(_this) {
      return function(err, res, hdr) {
        var results;
        if (err) {
          return callback(err, res);
        }
        if (Array.isArray(res.result) && res.result.length > 0) {
          results = [];
          res.result.forEach(function(result) {
            var converted_result;
            converted_result = _this.fromDB(model, result);
            return results.push(converted_result);
          });
        } else {
          results = _this.fromDB(model, res.result);
        }
        console.log(results);
        if ((filter != null ? filter.include : void 0) != null) {
          return _this._models[model].model.include(results,
            filter.include, callback);
        } else {
          return callback(null, results);
        }
      };
    })(this));
  };


  /*
    Delete a model instance by id
   */

  ArangoDB.prototype.destroy = function(model, id, callback) {
    debug("------------------------------");
    debug("" + model + ": DELETE instance with id '" + id + "'");
    return this.db.document["delete"](this.generateId(model, id),
      function(err) {
        if (err) {
          return callback(err);
        }
        return callback(null);
      });
  };


  /*
    Delete all model instances
   */

  ArangoDB.prototype.destroyAll = function(model, callback) {
    throw new Error("destroyAll not yet supported");
  };


  /*
   */

  ArangoDB.prototype.automigrate = function(callback) {
    var dropAndCreate;
    dropAndCreate = (function(_this) {
      return function(model, callback) {
        var create, drop;
        drop = function(callback) {
          _this.db.collection["delete"](model, function(err,
            result) {
            if (err && result.code !== 404) {
              return callback(err);
            }
            debug("" + model + " collection dropped");
            return callback(null);
          });
        };
        create = function(callback) {
          _this.db.collection.create(model, {
            waitForSync: true
          }, function(err) {
            if (err) {
              return callback(err);
            }
            debug("" + model + " collection created");
            return callback(null);
          });
        };
        return async.waterfall([drop, create], function(err) {
          if (err) {
            return callback(err);
          }
          return callback(null, "" + model +
            " successfully dropped and created");
        });
      };
    })(this);
    return async.each(Object.keys(this._models), dropAndCreate, function(
      err) {
      if (err) {
        return console.error(err);
      }
      debug("All models dropped and re-created");
      return process.exit();
    });
  };

  return ArangoDB;

})();
